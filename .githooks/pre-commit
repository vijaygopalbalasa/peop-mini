#!/bin/bash
#
# Git pre-commit hook to prevent committing sensitive information
# This hook will scan for potential secrets and block commits if found
#

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

echo -e "${YELLOW}üîç Scanning for sensitive information...${NC}"

# Patterns to search for (case insensitive)
SECRET_PATTERNS=(
    "private.*key.*[=:].*[0-9a-fA-F]{64}"
    "PRIVATE_KEY.*[=:].*[0-9a-fA-F]{64}"
    "secret.*[=:].*[a-zA-Z0-9]{20,}"
    "SECRET.*[=:].*[a-zA-Z0-9]{20,}"
    "api.*key.*[=:].*[a-zA-Z0-9]{20,}"
    "API.*KEY.*[=:].*[a-zA-Z0-9]{20,}"
    "password.*[=:].*[a-zA-Z0-9]{8,}"
    "PASSWORD.*[=:].*[a-zA-Z0-9]{8,}"
    "token.*[=:].*[a-zA-Z0-9]{20,}"
    "TOKEN.*[=:].*[a-zA-Z0-9]{20,}"
    "0x[0-9a-fA-F]{64}"
    "-----BEGIN.*PRIVATE.*KEY-----"
    "jwt.*[=:].*[a-zA-Z0-9\.\-_]{20,}"
    "JWT.*[=:].*[a-zA-Z0-9\.\-_]{20,}"
)

# Files to check (staged files)
STAGED_FILES=$(git diff --cached --name-only)

# Check if any files are staged
if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}‚úÖ No files staged for commit${NC}"
    exit 0
fi

# Flag to track if secrets were found
SECRETS_FOUND=false

# Check each staged file
for file in $STAGED_FILES; do
    # Skip deleted files
    if [ ! -f "$file" ]; then
        continue
    fi

    # Skip binary files
    if file "$file" | grep -q "binary"; then
        continue
    fi

    # Skip large files (>1MB)
    if [ $(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null) -gt 1048576 ]; then
        continue
    fi

    echo -e "${YELLOW}  Checking: $file${NC}"

    # Check file against each pattern
    for pattern in "${SECRET_PATTERNS[@]}"; do
        if grep -iE "$pattern" "$file" >/dev/null 2>&1; then
            echo -e "${RED}üö® POTENTIAL SECRET DETECTED in $file${NC}"
            echo -e "${RED}   Pattern: $pattern${NC}"
            echo -e "${RED}   Line(s):${NC}"
            grep -inE "$pattern" "$file" | head -3
            echo ""
            SECRETS_FOUND=true
        fi
    done
done

# Check for specific dangerous filenames
DANGEROUS_FILES=(
    ".env"
    ".env.local"
    ".env.production"
    "private-key"
    "secret"
    "credentials"
    "wallet.json"
    "keystore"
)

for file in $STAGED_FILES; do
    filename=$(basename "$file")
    for dangerous in "${DANGEROUS_FILES[@]}"; do
        if [[ "$filename" == "$dangerous"* ]]; then
            echo -e "${RED}üö® DANGEROUS FILENAME: $file${NC}"
            echo -e "${RED}   This file type should not be committed${NC}"
            SECRETS_FOUND=true
        fi
    done
done

# If secrets were found, block the commit
if [ "$SECRETS_FOUND" = true ]; then
    echo ""
    echo -e "${RED}‚ùå COMMIT BLOCKED - Potential secrets detected!${NC}"
    echo -e "${YELLOW}üõ°Ô∏è  Security measures:${NC}"
    echo "   1. Remove sensitive information from staged files"
    echo "   2. Add sensitive patterns to .gitignore"
    echo "   3. Use environment variables for secrets"
    echo "   4. Consider using a secrets management system"
    echo ""
    echo -e "${YELLOW}üí° To bypass this check (NOT RECOMMENDED):${NC}"
    echo "   git commit --no-verify"
    echo ""
    exit 1
fi

echo -e "${GREEN}‚úÖ No secrets detected - commit allowed${NC}"
exit 0